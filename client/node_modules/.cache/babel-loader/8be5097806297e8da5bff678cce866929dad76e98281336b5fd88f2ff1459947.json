{"ast":null,"code":"var _jsxFileName = \"F:\\\\CN LAB project\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col, Button, Alert, Nav, NavDropdown } from 'react-bootstrap';\nimport Login from './components/Login';\nimport Lobby from './components/Lobby';\nimport Game from './components/Game';\nimport SpectateGame from './components/SpectateGame';\nimport UserProfile from './components/UserProfile';\nimport GameHistory from './components/GameHistory';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentScreen, setCurrentScreen] = useState('login');\n  const [socket, setSocket] = useState(null);\n  const [user, setUser] = useState({\n    username: '',\n    playerId: null,\n    isAuthenticated: false,\n    isRegistered: false,\n    profile: null\n  });\n  const [gameData, setGameData] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [spectateGameId, setSpectateGameId] = useState(null);\n  const [gameHistory, setGameHistory] = useState([]);\n\n  // Connect to WebSocket server\n  useEffect(() => {\n    let reconnectTimer;\n    let reconnectAttempts = 0;\n    const MAX_RECONNECT_ATTEMPTS = 5;\n    const RECONNECT_DELAY = 3000; // 3 seconds\n\n    const connectWebSocket = () => {\n      const newSocket = new WebSocket('ws://localhost:8765');\n      newSocket.onopen = () => {\n        console.log('Connected to WebSocket server');\n        setErrorMessage(null);\n        reconnectAttempts = 0; // Reset reconnect attempts on successful connection\n      };\n      newSocket.onclose = event => {\n        console.log(`WebSocket closed with code: ${event.code}, reason: ${event.reason}`);\n        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n          setErrorMessage(`Lost connection to server. Attempting to reconnect... (${reconnectAttempts + 1}/${MAX_RECONNECT_ATTEMPTS})`);\n\n          // Try to reconnect after delay\n          reconnectTimer = setTimeout(() => {\n            reconnectAttempts++;\n            connectWebSocket();\n          }, RECONNECT_DELAY);\n        } else {\n          setErrorMessage('Lost connection to server. Please refresh the page to try again.');\n        }\n      };\n      newSocket.onerror = error => {\n        console.error('WebSocket error:', error);\n        setErrorMessage('Connection error. Please check if the server is running.');\n      };\n      newSocket.onmessage = event => {\n        const data = JSON.parse(event.data);\n        console.log('Received message:', data);\n        if (data.type === 'auth_response') {\n          if (data.success) {\n            const userUpdate = {\n              ...user,\n              playerId: data.player_id,\n              isAuthenticated: true,\n              isRegistered: !!data.user_profile // If user_profile exists, this is a registered user\n            };\n            if (data.user_profile) {\n              userUpdate.profile = data.user_profile;\n            }\n            setUser(userUpdate);\n            setCurrentScreen('lobby');\n          } else {\n            setErrorMessage(data.message);\n          }\n        } else if (data.type === 'game_start') {\n          setGameData({\n            gameId: data.game_id,\n            color: data.color,\n            opponent: data.opponent,\n            state: data.state\n          });\n          setCurrentScreen('game');\n        } else if (data.type === 'game_update') {\n          if (gameData) {\n            setGameData({\n              ...gameData,\n              state: data.state\n            });\n          }\n        } else if (data.type === 'spectate_game') {\n          setGameData({\n            gameId: data.game_id,\n            isSpectator: true,\n            state: data.state,\n            chatHistory: data.chat_history\n          });\n          setCurrentScreen('spectate');\n        } else if (data.type === 'user_games') {\n          setGameHistory(data.games);\n        } else if (data.type === 'user_stats') {\n          setUser({\n            ...user,\n            profile: {\n              ...user.profile,\n              ...data.stats\n            }\n          });\n        } else if (data.type === 'error') {\n          setErrorMessage(data.message);\n          setTimeout(() => setErrorMessage(null), 5000);\n        }\n      };\n      setSocket(newSocket);\n    };\n\n    // Initial connection\n    connectWebSocket();\n\n    // Cleanup on unmount\n    return () => {\n      if (reconnectTimer) {\n        clearTimeout(reconnectTimer);\n      }\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, []);\n  const handleLogin = (username, password, isRegistering) => {\n    if (socket) {\n      if (isRegistering) {\n        // Send registration request\n        socket.send(JSON.stringify({\n          type: 'register',\n          username: username,\n          password: password\n        }));\n      } else if (password) {\n        // Send login request (with password)\n        socket.send(JSON.stringify({\n          type: 'login',\n          username: username,\n          password: password\n        }));\n      } else {\n        // Guest login (no password)\n        socket.send(JSON.stringify({\n          type: 'register',\n          username: username\n        }));\n      }\n      setUser({\n        ...user,\n        username: username\n      });\n    }\n  };\n  const handleFindMatch = () => {\n    if (socket && user.isAuthenticated) {\n      socket.send(JSON.stringify({\n        type: 'find_match'\n      }));\n    }\n  };\n  const handleSpectate = gameId => {\n    if (socket && user.isAuthenticated) {\n      socket.send(JSON.stringify({\n        type: 'spectate',\n        game_id: gameId\n      }));\n      setSpectateGameId(gameId);\n    }\n  };\n  const handleMove = move => {\n    if (socket && gameData) {\n      socket.send(JSON.stringify({\n        type: 'make_move',\n        move: move\n      }));\n    }\n  };\n  const handleSendChat = message => {\n    if (socket && gameData) {\n      socket.send(JSON.stringify({\n        type: 'chat',\n        message: message\n      }));\n    }\n  };\n  const handleLoadUserGames = () => {\n    if (socket && user.isAuthenticated) {\n      socket.send(JSON.stringify({\n        type: 'get_user_games'\n      }));\n    }\n  };\n  const handleLoadUserStats = () => {\n    if (socket && user.isAuthenticated && user.isRegistered) {\n      socket.send(JSON.stringify({\n        type: 'get_user_stats'\n      }));\n    }\n  };\n  const handleLogout = () => {\n    if (socket) {\n      // Close the current socket connection\n      socket.close();\n\n      // Reset user state\n      setUser({\n        username: '',\n        playerId: null,\n        isAuthenticated: false,\n        isRegistered: false,\n        profile: null\n      });\n\n      // Reset game data\n      setGameData(null);\n      setSpectateGameId(null);\n      setGameHistory([]);\n\n      // Go back to login screen\n      setCurrentScreen('login');\n\n      // Create a new socket connection\n      const newSocket = new WebSocket('ws://localhost:8765');\n      setSocket(newSocket);\n    }\n  };\n  const goToLobby = () => {\n    setCurrentScreen('lobby');\n    setGameData(null);\n    setSpectateGameId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center\",\n          children: \"Multiplayer Chess\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), user.isAuthenticated && /*#__PURE__*/_jsxDEV(Row, {\n      className: \"navigation-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Nav, {\n          variant: \"tabs\",\n          children: [/*#__PURE__*/_jsxDEV(Nav.Item, {\n            children: /*#__PURE__*/_jsxDEV(Nav.Link, {\n              onClick: () => setCurrentScreen('lobby'),\n              active: currentScreen === 'lobby',\n              children: \"Lobby\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this), gameData && /*#__PURE__*/_jsxDEV(Nav.Item, {\n            children: /*#__PURE__*/_jsxDEV(Nav.Link, {\n              onClick: () => setCurrentScreen(spectateGameId ? 'spectate' : 'game'),\n              active: currentScreen === 'game' || currentScreen === 'spectate',\n              children: [spectateGameId ? 'Spectating' : 'Playing', \" Game\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 17\n          }, this), user.isRegistered && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Nav.Item, {\n              children: /*#__PURE__*/_jsxDEV(Nav.Link, {\n                onClick: () => {\n                  handleLoadUserGames();\n                  setCurrentScreen('history');\n                },\n                active: currentScreen === 'history',\n                children: \"Game History\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Nav.Item, {\n              children: /*#__PURE__*/_jsxDEV(Nav.Link, {\n                onClick: () => {\n                  handleLoadUserStats();\n                  setCurrentScreen('profile');\n                },\n                active: currentScreen === 'profile',\n                children: \"Profile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: \"auto\",\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Logged in as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 29\n          }, this), user.isRegistered ? ' (Registered)' : ' (Guest)']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-secondary\",\n          size: \"sm\",\n          className: \"ms-3\",\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mt-3\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"content-area\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: [currentScreen === 'login' && /*#__PURE__*/_jsxDEV(Login, {\n          onLogin: handleLogin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this), currentScreen === 'lobby' && /*#__PURE__*/_jsxDEV(Lobby, {\n          onFindMatch: handleFindMatch,\n          onSpectate: handleSpectate,\n          socket: socket,\n          isRegistered: user.isRegistered\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this), currentScreen === 'game' && gameData && /*#__PURE__*/_jsxDEV(Game, {\n          gameData: gameData,\n          onMove: handleMove,\n          onSendChat: handleSendChat,\n          socket: socket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this), currentScreen === 'spectate' && gameData && /*#__PURE__*/_jsxDEV(SpectateGame, {\n          gameData: gameData,\n          onSendChat: handleSendChat,\n          onBack: goToLobby,\n          socket: socket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this), currentScreen === 'history' && /*#__PURE__*/_jsxDEV(GameHistory, {\n          games: gameHistory,\n          username: user.username,\n          onLoadGames: handleLoadUserGames\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this), currentScreen === 'profile' && /*#__PURE__*/_jsxDEV(UserProfile, {\n          userProfile: user.profile,\n          onLoadStats: handleLoadUserStats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4R1GsDOxachILVAEA9at5hzqSk4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Button","Alert","Nav","NavDropdown","Login","Lobby","Game","SpectateGame","UserProfile","GameHistory","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentScreen","setCurrentScreen","socket","setSocket","user","setUser","username","playerId","isAuthenticated","isRegistered","profile","gameData","setGameData","errorMessage","setErrorMessage","spectateGameId","setSpectateGameId","gameHistory","setGameHistory","reconnectTimer","reconnectAttempts","MAX_RECONNECT_ATTEMPTS","RECONNECT_DELAY","connectWebSocket","newSocket","WebSocket","onopen","console","log","onclose","event","code","reason","setTimeout","onerror","error","onmessage","data","JSON","parse","type","success","userUpdate","player_id","user_profile","message","gameId","game_id","color","opponent","state","isSpectator","chatHistory","chat_history","games","stats","clearTimeout","close","handleLogin","password","isRegistering","send","stringify","handleFindMatch","handleSpectate","handleMove","move","handleSendChat","handleLoadUserGames","handleLoadUserStats","handleLogout","goToLobby","fluid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","Item","Link","onClick","active","xs","size","onLogin","onFindMatch","onSpectate","onMove","onSendChat","onBack","onLoadGames","userProfile","onLoadStats","_c","$RefreshReg$"],"sources":["F:/CN LAB project/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Row, Col, Button, Alert, Nav, NavDropdown } from 'react-bootstrap';\r\nimport Login from './components/Login';\r\nimport Lobby from './components/Lobby';\r\nimport Game from './components/Game';\r\nimport SpectateGame from './components/SpectateGame';\r\nimport UserProfile from './components/UserProfile';\r\nimport GameHistory from './components/GameHistory';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [currentScreen, setCurrentScreen] = useState('login');\r\n  const [socket, setSocket] = useState(null);\r\n  const [user, setUser] = useState({\r\n    username: '',\r\n    playerId: null,\r\n    isAuthenticated: false,\r\n    isRegistered: false,\r\n    profile: null\r\n  });\r\n  const [gameData, setGameData] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [spectateGameId, setSpectateGameId] = useState(null);\r\n  const [gameHistory, setGameHistory] = useState([]);\r\n\r\n  // Connect to WebSocket server\r\n  useEffect(() => {\r\n    let reconnectTimer;\r\n    let reconnectAttempts = 0;\r\n    const MAX_RECONNECT_ATTEMPTS = 5;\r\n    const RECONNECT_DELAY = 3000; // 3 seconds\r\n\r\n    const connectWebSocket = () => {\r\n      const newSocket = new WebSocket('ws://localhost:8765');\r\n      \r\n      newSocket.onopen = () => {\r\n        console.log('Connected to WebSocket server');\r\n        setErrorMessage(null);\r\n        reconnectAttempts = 0; // Reset reconnect attempts on successful connection\r\n      };\r\n      \r\n      newSocket.onclose = (event) => {\r\n        console.log(`WebSocket closed with code: ${event.code}, reason: ${event.reason}`);\r\n        \r\n        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\r\n          setErrorMessage(`Lost connection to server. Attempting to reconnect... (${reconnectAttempts + 1}/${MAX_RECONNECT_ATTEMPTS})`);\r\n          \r\n          // Try to reconnect after delay\r\n          reconnectTimer = setTimeout(() => {\r\n            reconnectAttempts++;\r\n            connectWebSocket();\r\n          }, RECONNECT_DELAY);\r\n        } else {\r\n          setErrorMessage('Lost connection to server. Please refresh the page to try again.');\r\n        }\r\n      };\r\n      \r\n      newSocket.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        setErrorMessage('Connection error. Please check if the server is running.');\r\n      };\r\n      \r\n      newSocket.onmessage = (event) => {\r\n        const data = JSON.parse(event.data);\r\n        console.log('Received message:', data);\r\n        \r\n        if (data.type === 'auth_response') {\r\n          if (data.success) {\r\n            const userUpdate = {\r\n              ...user,\r\n              playerId: data.player_id,\r\n              isAuthenticated: true,\r\n              isRegistered: !!data.user_profile // If user_profile exists, this is a registered user\r\n            };\r\n            \r\n            if (data.user_profile) {\r\n              userUpdate.profile = data.user_profile;\r\n            }\r\n            \r\n            setUser(userUpdate);\r\n            setCurrentScreen('lobby');\r\n          } else {\r\n            setErrorMessage(data.message);\r\n          }\r\n        }\r\n        \r\n        else if (data.type === 'game_start') {\r\n          setGameData({\r\n            gameId: data.game_id,\r\n            color: data.color,\r\n            opponent: data.opponent,\r\n            state: data.state\r\n          });\r\n          setCurrentScreen('game');\r\n        }\r\n        \r\n        else if (data.type === 'game_update') {\r\n          if (gameData) {\r\n            setGameData({\r\n              ...gameData,\r\n              state: data.state\r\n            });\r\n          }\r\n        }\r\n        \r\n        else if (data.type === 'spectate_game') {\r\n          setGameData({\r\n            gameId: data.game_id,\r\n            isSpectator: true,\r\n            state: data.state,\r\n            chatHistory: data.chat_history\r\n          });\r\n          setCurrentScreen('spectate');\r\n        }\r\n        \r\n        else if (data.type === 'user_games') {\r\n          setGameHistory(data.games);\r\n        }\r\n        \r\n        else if (data.type === 'user_stats') {\r\n          setUser({\r\n            ...user,\r\n            profile: {\r\n              ...user.profile,\r\n              ...data.stats\r\n            }\r\n          });\r\n        }\r\n        \r\n        else if (data.type === 'error') {\r\n          setErrorMessage(data.message);\r\n          setTimeout(() => setErrorMessage(null), 5000);\r\n        }\r\n      };\r\n      \r\n      setSocket(newSocket);\r\n    };\r\n\r\n    // Initial connection\r\n    connectWebSocket();\r\n    \r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (reconnectTimer) {\r\n        clearTimeout(reconnectTimer);\r\n      }\r\n      if (socket) {\r\n        socket.close();\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  const handleLogin = (username, password, isRegistering) => {\r\n    if (socket) {\r\n      if (isRegistering) {\r\n        // Send registration request\r\n        socket.send(JSON.stringify({\r\n          type: 'register',\r\n          username: username,\r\n          password: password\r\n        }));\r\n      } else if (password) {\r\n        // Send login request (with password)\r\n        socket.send(JSON.stringify({\r\n          type: 'login',\r\n          username: username,\r\n          password: password\r\n        }));\r\n      } else {\r\n        // Guest login (no password)\r\n        socket.send(JSON.stringify({\r\n          type: 'register',\r\n          username: username\r\n        }));\r\n      }\r\n      \r\n      setUser({\r\n        ...user,\r\n        username: username\r\n      });\r\n    }\r\n  };\r\n  \r\n  const handleFindMatch = () => {\r\n    if (socket && user.isAuthenticated) {\r\n      socket.send(JSON.stringify({\r\n        type: 'find_match'\r\n      }));\r\n    }\r\n  };\r\n  \r\n  const handleSpectate = (gameId) => {\r\n    if (socket && user.isAuthenticated) {\r\n      socket.send(JSON.stringify({\r\n        type: 'spectate',\r\n        game_id: gameId\r\n      }));\r\n      setSpectateGameId(gameId);\r\n    }\r\n  };\r\n  \r\n  const handleMove = (move) => {\r\n    if (socket && gameData) {\r\n      socket.send(JSON.stringify({\r\n        type: 'make_move',\r\n        move: move\r\n      }));\r\n    }\r\n  };\r\n  \r\n  const handleSendChat = (message) => {\r\n    if (socket && gameData) {\r\n      socket.send(JSON.stringify({\r\n        type: 'chat',\r\n        message: message\r\n      }));\r\n    }\r\n  };\r\n  \r\n  const handleLoadUserGames = () => {\r\n    if (socket && user.isAuthenticated) {\r\n      socket.send(JSON.stringify({\r\n        type: 'get_user_games'\r\n      }));\r\n    }\r\n  };\r\n  \r\n  const handleLoadUserStats = () => {\r\n    if (socket && user.isAuthenticated && user.isRegistered) {\r\n      socket.send(JSON.stringify({\r\n        type: 'get_user_stats'\r\n      }));\r\n    }\r\n  };\r\n  \r\n  const handleLogout = () => {\r\n    if (socket) {\r\n      // Close the current socket connection\r\n      socket.close();\r\n      \r\n      // Reset user state\r\n      setUser({\r\n        username: '',\r\n        playerId: null,\r\n        isAuthenticated: false,\r\n        isRegistered: false,\r\n        profile: null\r\n      });\r\n      \r\n      // Reset game data\r\n      setGameData(null);\r\n      setSpectateGameId(null);\r\n      setGameHistory([]);\r\n      \r\n      // Go back to login screen\r\n      setCurrentScreen('login');\r\n      \r\n      // Create a new socket connection\r\n      const newSocket = new WebSocket('ws://localhost:8765');\r\n      setSocket(newSocket);\r\n    }\r\n  };\r\n  \r\n  const goToLobby = () => {\r\n    setCurrentScreen('lobby');\r\n    setGameData(null);\r\n    setSpectateGameId(null);\r\n  };\r\n  \r\n  return (\r\n    <Container fluid className=\"app-container\">\r\n      <Row className=\"header\">\r\n        <Col>\r\n          <h1 className=\"text-center\">Multiplayer Chess</h1>\r\n        </Col>\r\n      </Row>\r\n      \r\n      {user.isAuthenticated && (\r\n        <Row className=\"navigation-bar\">\r\n          <Col>\r\n            <Nav variant=\"tabs\">\r\n              <Nav.Item>\r\n                <Nav.Link \r\n                  onClick={() => setCurrentScreen('lobby')} \r\n                  active={currentScreen === 'lobby'}\r\n                >\r\n                  Lobby\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n              {gameData && (\r\n                <Nav.Item>\r\n                  <Nav.Link \r\n                    onClick={() => setCurrentScreen(spectateGameId ? 'spectate' : 'game')} \r\n                    active={currentScreen === 'game' || currentScreen === 'spectate'}\r\n                  >\r\n                    {spectateGameId ? 'Spectating' : 'Playing'} Game\r\n                  </Nav.Link>\r\n                </Nav.Item>\r\n              )}\r\n              {user.isRegistered && (\r\n                <>\r\n                  <Nav.Item>\r\n                    <Nav.Link \r\n                      onClick={() => {\r\n                        handleLoadUserGames();\r\n                        setCurrentScreen('history');\r\n                      }}\r\n                      active={currentScreen === 'history'}\r\n                    >\r\n                      Game History\r\n                    </Nav.Link>\r\n                  </Nav.Item>\r\n                  <Nav.Item>\r\n                    <Nav.Link \r\n                      onClick={() => {\r\n                        handleLoadUserStats();\r\n                        setCurrentScreen('profile');\r\n                      }}\r\n                      active={currentScreen === 'profile'}\r\n                    >\r\n                      Profile\r\n                    </Nav.Link>\r\n                  </Nav.Item>\r\n                </>\r\n              )}\r\n            </Nav>\r\n          </Col>\r\n          <Col xs=\"auto\" className=\"user-info\">\r\n            <span>\r\n              Logged in as: <strong>{user.username}</strong>\r\n              {user.isRegistered ? ' (Registered)' : ' (Guest)'}\r\n            </span>\r\n            <Button variant=\"outline-secondary\" size=\"sm\" className=\"ms-3\" onClick={handleLogout}>\r\n              Logout\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      \r\n      {errorMessage && (\r\n        <Row className=\"mt-3\">\r\n          <Col>\r\n            <Alert variant=\"danger\">{errorMessage}</Alert>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      \r\n      <Row className=\"content-area\">\r\n        <Col>\r\n          {currentScreen === 'login' && (\r\n            <Login onLogin={handleLogin} />\r\n          )}\r\n          \r\n          {currentScreen === 'lobby' && (\r\n            <Lobby \r\n              onFindMatch={handleFindMatch} \r\n              onSpectate={handleSpectate}\r\n              socket={socket}\r\n              isRegistered={user.isRegistered}\r\n            />\r\n          )}\r\n          \r\n          {currentScreen === 'game' && gameData && (\r\n            <Game \r\n              gameData={gameData} \r\n              onMove={handleMove} \r\n              onSendChat={handleSendChat}\r\n              socket={socket}\r\n            />\r\n          )}\r\n          \r\n          {currentScreen === 'spectate' && gameData && (\r\n            <SpectateGame \r\n              gameData={gameData} \r\n              onSendChat={handleSendChat}\r\n              onBack={goToLobby}\r\n              socket={socket}\r\n            />\r\n          )}\r\n          \r\n          {currentScreen === 'history' && (\r\n            <GameHistory \r\n              games={gameHistory}\r\n              username={user.username}\r\n              onLoadGames={handleLoadUserGames}\r\n            />\r\n          )}\r\n          \r\n          {currentScreen === 'profile' && (\r\n            <UserProfile \r\n              userProfile={user.profile}\r\n              onLoadStats={handleLoadUserStats}\r\n            />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}